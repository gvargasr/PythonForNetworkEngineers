# Introduction

- Designing and developing software
- Network Environment
- APIs
- JSON, XML and YAML
- Version control System (Git)


# Rise of APIs in Software Design

Trends in SW development:

- Web Applications.
- Mobile applications.
- Integration with Social Media.
- Cloud services.
- Free software and libraries.

API allow faster prototyping and development of software. APIs allow to simply use and existing service or library to create a prototype or program.
APIs enable communication between computer systems, specifying the details of how the information is exchanged. To facilitate code and functions RE-USE.

# Using APIs

To use APIs effectively consider:

- Modular software design.
- Prototyping and testing API inteegration.
- Challenges in consuming networked APIs
- Distributed computing patterns.

CI/CD >>> Continuous Integrations and continuous deployment.

Main purpose of APIs is to expose functionality, Documentation is equally important as implementation.

API documentation provides:
- Which functions or endpoints to call.
- Which data to provide as parameters or expect as output.
- How to encode protocol messages and data objects.


APIs:
- Enable separation of concerns.
- Facilitate testing.


There are two perspectives:
- Client and Server perspective.


# API Data Formats

YAML, JSON, XML

XML is often used for communications machine-to-machine as it is not so human readable.

JSON uses same syntax as JavaScript, it is easy to convert JSON file into JavaScript.

YAML is human readable. Indentation is similar as in Python.

Any kind of data can be represented in any given format.


YAML A'int Markup Language

- Whitespaces are significant as indentation defines the structure in a YAML file.
- Keys and Values are separated by a colon and space ": "
- YAML try to assume which data type is intended as the value.
- commas ',' are not required at the end of a line.
- dash '-' denotes lists in YAML

user:
  name: john
  locaiton:
    city: Austin
    state: TX
  roles:
    - admin
    - user


JSON JavaScript Object Notation

Easy to convert from JSON file to native JavaScript objects.

JSON syntax uses curly braces {}, square brackets [], and quotes '' or "".
Typically the very first character in a JSON file is a curly brace . Whitespaces are only for human reading.

{
  "user": {
    "name": "john",
    "location": {
      "city": "Austin",
      "state": "TX"
    },
    "roles": [
      "admin",
      "user"
    ]
  }
}

Is represented similar to YAML using key-value notation. A comma has to be used to separate values, except for the last value that does not require a comma.


XML  eXtensible Markup Language

Markup Language means that they indicate which parts of a document are present and not how the data is going to be shown in your system.

XML uses tags >>  <tags></tags> in form as <key>value</key>

Usually all tag names are written in lower case. Whitespases inside same tags are significant, if they are between different tags for 
human readability are not significant.


<?xml version="1.0" encoding="UTF-8" ?>
<user>
  <name>john</name>
  <location>
    <city>Austin</city>
    <state>TX</state>
  </location>
  <roles>admin</roles>
  <roles>user</roles>
</user>



XML Namespaces: are used to avoid conflicts when using same tag on different XML files.    in the starting tag we have to configure the namespace:
xmlns:prefix='URI'

Without Namespace:

<table>
  <tr>
    <td>Router</td>
    <td>Switch</td>
  </tr>
</table>

With Namespace: 

<a:table xmlns:a='namespaceURI_a'>
  <a:tr>
    <a:td>Router</a:td>
    <a:td>Switch</a:td>
  </a:tr>
</a:table>


YAML and JSON can also use namespaces.


If we are using RESTCONF, JSON files require a Namespace.


# Serialization and Deserialization of Data.

Serialization: Convert data structure or an object into a binary or textual format that can be stored and reconstructed later.
Serialized files could be in YAML, JSON, XML or any other text format or binary format.

Deserialization: Open the file and reconstruct it to the originak state with all the objects inside.

Serialization > Convert an object into a file.
Deserialization > Convert the file back to an object. This is also called: "data or file parsing"

# Intro to Python

Created by Guido van Rossum in 1991

to view the Zen of Python >> type "import this"
to check Python version installed: python --version or python -V 


# Python Libraries:

A library is any code outside your script that you want to use.

Using libraries, the code becomes less error prune, and we can reuse the code that has been tested over and over.
By only importing a specific library into your Python code we gain a wide range of features without the need to develop them ourselves.


to see all available libraries/packages available >> https://pypi.org
and then install it using "pip install <library>"

Other option is thru the GitHub repository >> https://github.com


# YAML File Manipulation with Python

refer to files:
  firstYaml.py
  firstJSON.py
  firstXML.py


# PARSE API DATA FORMATS LAB











